name: Deploy to EC2

on:
  push:
    branches:
      - master

jobs:
  # Job to test SSH connection
  test-ssh-connection:
      runs-on: ubuntu-latest

      steps:
        - name: Start SSH Agent
          uses: webfactory/ssh-agent@v0.5.3
          with:
            ssh-private-key: ${{ secrets.EC2_SSH_KEY }}

        - name: Test SSH Connection
          run: ssh -o StrictHostKeyChecking=no ubuntu@${{ secrets.EC2_HOST }} "echo 'SSH Connection Successful'"

  # Job to deploy the application
  deploy:
    runs-on: ubuntu-latest
    needs: test-ssh-connection 

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.EC2_SSH_KEY }}

      - name: Deploy to EC2
        run: |
          ssh -T -o StrictHostKeyChecking=no ubuntu@${{ secrets.EC2_HOST }} << 'EOF'
            # Clone the repository if not already present
            git clone https://github.com/VootlaSaiCharan/htmlproject.git
            
            # Check if any containers are running
            running_containers=$(docker ps -q)
            if [ -n "$running_containers" ]; then
              echo 'Stopping and removing running containers...'
              docker stop $(docker ps -q) || true
              docker rm $(docker ps -aq) || true
            else
              echo 'No running containers found.'
              # Remove stopped containers
              docker rm $(docker ps -aq) || true
            fi

            # Remove images
            echo 'Removing Docker images...'
            docker rmi $(docker images -q) || true

            # Check if no containers or images are present
            no_containers=$(docker ps -q)
            no_images=$(docker images -q)
            if [ -z "$no_containers" ] && [ -z "$no_images" ]; then
              echo 'No containers and images found.'
            fi

            # Build Docker image
            echo 'Building Docker image...'
            docker build -t my-nginx-app .

            # Stop and remove existing container if it exists
            docker stop my-nginx-app || true
            docker rm my-nginx-app || true

            # Run the new container
            docker run -d -p 80:80 --name my-nginx-app my-nginx-app:latest
          EOF